{"version":3,"sources":["apis/config.js","apis/youtube.js","components/SearchBar/index.tsx","components/VideoDetail/index.tsx","components/VideoItem/index.tsx","containers/VideoList/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_KEY","youtube","axios","create","baseURL","params","part","maxResults","key","SearchBar","onFormSubmit","useState","term","setTerm","className","onSubmit","event","preventDefault","htmlFor","id","type","value","onChange","target","VideoDetail","video","videoSrc","videoId","title","src","snippet","description","VideoItem","onVideoSelect","onClick","alt","thumbnails","medium","url","VideoList","videos","renderedList","map","App","setVideos","selectedVideo","setSelectedVideo","useEffect","onTermSubmit","a","get","q","response","data","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAEeA,EAFC,0CCeDC,E,OATCC,EAAMC,OAAO,CAC3BC,QAAS,wCACTC,OAAQ,CACNC,KAAM,UACNC,WAAY,EACZC,IAAKR,KC4BMS,EA/BoB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAC/BC,mBAAiB,IADc,mBAChDC,EADgD,KAC1CC,EAD0C,KAYvD,OACE,yBAAKC,UAAU,yBACb,0BAAMC,SAPO,SAACC,GAChBA,EAAMC,iBACNP,EAAaE,IAKeE,UAAU,WAClC,yBAAKA,UAAU,SACb,2BAAOI,QAAQ,gBAAf,eAEE,2BACEC,GAAG,eACHC,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACN,GACrBH,EAAQG,EAAMO,OAAOF,eCWVG,EArBsC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEtD,IAAKA,GAAkB,MAATA,EACZ,OAAO,2CAGT,IAAMC,EAAQ,wCAAoCD,EAAMN,GAAGQ,SAE3D,OACE,6BACE,yBAAKb,UAAU,YACb,4BAAQc,MAAM,eAAeC,IAAKH,KAEpC,yBAAKZ,UAAU,cACb,wBAAIA,UAAU,aAAaW,EAAMK,QAAQF,OACzC,2BAAIH,EAAMK,QAAQC,gBCKXC,G,MAboB,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAOQ,EAAV,EAAUA,cAAV,OACjC,yBAAKC,QAAS,kBAAMD,EAAcR,IAAQX,UAAU,mBAClD,yBACEqB,IAAKV,EAAMK,QAAQF,MACnBd,UAAU,WACVe,IAAKJ,EAAMK,QAAQM,WAAWC,OAAOC,MAEvC,yBAAKxB,UAAU,WACb,yBAAKA,UAAU,UAAUW,EAAMK,QAAQF,WCI9BW,EAZoB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAAQP,EAAoB,EAApBA,cACtCQ,EAAeD,EAAOE,KAAI,SAACjB,GAAD,OAC9B,kBAAC,EAAD,CACEjB,IAAKiB,EAAMN,GAAGQ,QACdM,cAAeA,EACfR,MAAOA,OAIX,OAAO,yBAAKX,UAAU,2BAA2B2B,ICkCpCE,EA5CH,WAAO,IAAD,EACYhC,mBAAmB,IAD/B,mBACT6B,EADS,KACDI,EADC,OAE0BjC,mBAAwB,MAFlD,mBAETkC,EAFS,KAEMC,EAFN,KAIhBC,qBAAU,WACRC,EAAa,aACZ,IAEH,IAAMA,EAAY,uCAAG,WAAOpC,GAAP,eAAAqC,EAAA,sEACIhD,EAAQiD,IAAI,UAAW,CAG5C7C,OAAQ,CACN8C,EAAGvC,EACHN,KAAM,UACNC,WAAY,EACZC,IAAKR,KARU,OACboD,EADa,OAWnBR,EAAU,YAAIQ,EAASC,KAAKC,QAC5BR,EAAiBM,EAASC,KAAKC,MAAM,IAZlB,2CAAH,sDAmBlB,OACE,yBAAKxC,UAAU,gBACb,kBAAC,EAAD,CAAWJ,aAAcsC,IACzB,yBAAKlC,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAaW,MAAOoB,KAEtB,yBAAK/B,UAAU,oBACb,kBAAC,EAAD,CAAWmB,cAbC,SAACR,GACrBqB,EAAiBrB,IAYgCe,OAAQA,SChCzCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e7f7408.chunk.js","sourcesContent":["const API_KEY = 'AIzaSyBmQN8XKCc4HqAjKbW0kqJfyFz6p-t-Shc'\r\n\r\nexport default API_KEY;\r\n","import axios from 'axios';\r\n\r\nimport API_KEY from './config'; //API_KEY is private\r\n\r\n\r\n\r\nconst youtube = axios.create({\r\n  baseURL: 'https://www.googleapis.com/youtube/v3',\r\n  params: {\r\n    part: 'snippet',\r\n    maxResults: 8,\r\n    key: API_KEY\r\n  }\r\n});\r\n\r\nexport default youtube;\r\n\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable linebreak-style */\r\nimport React, { useState } from 'react';\r\n\r\ninterface Props {\r\n  onFormSubmit: Function;\r\n}\r\n\r\nconst SearchBar: React.FC<Props> = ({ onFormSubmit }) => {\r\n  const [term, setTerm] = useState<string>('');\r\n\r\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setTerm(event.target.value);\r\n  };\r\n\r\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault();\r\n    onFormSubmit(term);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-bar ui segment\">\r\n      <form onSubmit={onSubmit} className=\"ui form\">\r\n        <div className=\"field\">\r\n          <label htmlFor=\"video-search\">\r\n            Video Search\r\n            <input\r\n              id=\"video-search\"\r\n              type=\"text\"\r\n              value={term}\r\n              onChange={onInputChange}\r\n            />\r\n          </label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst VideoDetail: React.FC<{ video: any | null }> = ({ video }) => {\r\n  debugger;\r\n  if (!video || video == null) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n\r\n  return (\r\n    <div>\r\n      <div className='ui embed'>\r\n        <iframe title='video player' src={videoSrc} />\r\n      </div>\r\n      <div className='ui segment'>\r\n        <h4 className='ui header'>{video.snippet.title}</h4>\r\n        <p>{video.snippet.description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoDetail;\r\n","import React from 'react';\r\n\r\nimport './VideoItem.scss';\r\n\r\ninterface Props {\r\n  video: any;\r\n  onVideoSelect: Function;\r\n}\r\n\r\nconst VideoItem: React.FC<Props> = ({ video, onVideoSelect }) => (\r\n  <div onClick={() => onVideoSelect(video)} className='video-item item'>\r\n    <img\r\n      alt={video.snippet.title}\r\n      className='ui image'\r\n      src={video.snippet.thumbnails.medium.url}\r\n    />\r\n    <div className='content'>\r\n      <div className='header'>{video.snippet.title}</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default VideoItem;\r\n","import React from 'react';\r\n\r\nimport VideoItem from '../../components/VideoItem';\r\n\r\ninterface Props {\r\n  videos: any[];\r\n  onVideoSelect: Function;\r\n}\r\n\r\nconst VideoList: React.FC<Props> = ({ videos, onVideoSelect }) => {\r\n  const renderedList = videos.map((video) => (\r\n    <VideoItem\r\n      key={video.id.videoId}\r\n      onVideoSelect={onVideoSelect}\r\n      video={video}\r\n    />\r\n  ));\r\n\r\n  return <div className=\"ui relaxed divided list\">{renderedList}</div>;\r\n};\r\n\r\nexport default VideoList;\r\n","import React, { useState, useEffect } from 'react';\n\nimport youtube from './apis/youtube.js';\nimport API_KEY from './apis/config';\nimport SearchBar from './components/SearchBar';\nimport VideoDetail from './components/VideoDetail';\nimport VideoList from './containers/VideoList';\n\nconst App = () => {\n  const [videos, setVideos] = useState<object[]>([]);\n  const [selectedVideo, setSelectedVideo] = useState<object | null>(null);\n\n  useEffect(() => {\n    onTermSubmit('vietnam');\n  }, []);\n\n  const onTermSubmit = async (term: string) => {\n    const response = await youtube.get('/search', {\n      // ? for some unknown reason, axios.create does not have params\n      // ? still figuring it out\n      params: {\n        q: term,\n        part: 'snippet',\n        maxResults: 8,\n        key: API_KEY,\n      },\n    });\n    setVideos([...response.data.items]);\n    setSelectedVideo(response.data.items[0]);\n  };\n\n  const onVideoSelect = (video: any): void => {\n    setSelectedVideo(video);\n  };\n\n  return (\n    <div className='ui container'>\n      <SearchBar onFormSubmit={onTermSubmit} />\n      <div className='ui grid'>\n        <div className='ui row'>\n          <div className='eleven wide column'>\n            <VideoDetail video={selectedVideo} />\n          </div>\n          <div className='five wide column'>\n            <VideoList onVideoSelect={onVideoSelect} videos={videos} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}